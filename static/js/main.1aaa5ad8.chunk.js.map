{"version":3,"sources":["missing.png","api/Post.js","helpers/ThrottleQueue.js","api/E621Fetcher.js","components/Field.js","components/E621Filters.js","components/ImageCache.js","components/Slideshow.js","helpers/PostManager.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Post","id","contentURL","previewURL","extension","link","this","ThrottleQueue","limit","ready","queue","fn","push","processQueue","length","shift","setTimeout","refresh","bind","E621Fetcher","filters","settings","page","fetching","finished","URLSearchParams","userAgent","tags","toString","callback","url","getURL","ajaxCallback","fetchCallback","add","$","ajax","crossDomain","dataType","success","currentPage","data","getPosts","jsonPosts","posts","i","Field","props","label","React","Component","E621Filters","handleTagsChange","search","state","className","type","onChange","onKeyPress","handleTagsKey","onClick","escape","e","setState","target","value","key","searchCallback","ImageCache","style","display","getImages","images","src","alt","Slideshow","post","prev","href","rel","next","PostManager","fetcher","order","currentIndex","validExtensions","Set","fetch","addPosts","has","isPostAllowed","index","postCount","fetchIfApplicable","getPostByIndex","preload","postload","minimum","maximum","App","searchEscape","slideshowEscape","slideshowNext","slideshowPrev","keydownHandler","mode","api","currentCache","slideshowPost","postManager","missingPost","which","keyCode","document","addEventListener","getCachePosts","getCurrentPost","missing","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1aaa5ad8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/missing.a7a5b39c.png\";","class Post {\r\n  constructor(id, contentURL, previewURL, extension, link) {\r\n    this.id = id;\r\n    this.contentURL = contentURL;\r\n    this.previewURL = previewURL;\r\n    this.extension = extension;\r\n    this.link = link;\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","// Allows functions to be called at a throttled rate\r\nexport class ThrottleQueue {\r\n  constructor (limit = 1000) {\r\n    this.limit = limit;\r\n    this.ready = true;\r\n    this.queue = [];\r\n  }\r\n\r\n  // Adds a function to the queue\r\n  add(fn) {\r\n    this.queue.push(fn);\r\n    this.processQueue();\r\n  }\r\n\r\n  // Calls the oldest function from the queue, if one exists \r\n  processQueue() {\r\n    if (this.queue.length > 0 && this.ready) {\r\n      this.ready = false;\r\n      this.queue.shift()();\r\n      setTimeout(this.refresh.bind(this), this.limit);\r\n    }\r\n  }\r\n\r\n  // Called when the cooldown finishes, processes next function\r\n  refresh() {\r\n    this.ready = true;\r\n    this.processQueue();\r\n  }\r\n}\r\n\r\nexport default ThrottleQueue;\r\n","import $ from 'jquery';\r\n\r\nimport Post from './Post';\r\nimport ThrottleQueue from '../helpers/ThrottleQueue';\r\n\r\n\r\nexport class E621Fetcher {\r\n  static userAgent = \"Ilm's Slideshow/1.0\";\r\n  static queue = new ThrottleQueue(1000);\r\n\r\n  constructor(filters, settings) {\r\n    this.filters = filters;\r\n    this.settings = settings;\r\n    this.page = 1;\r\n    this.fetching = false;\r\n    this.finished = false;\r\n  }\r\n\r\n  getURL() {\r\n    // TODO add login from settings\r\n    return 'https://e621.net/posts.json?' + new URLSearchParams({\r\n      \"_client\": E621Fetcher.userAgent,\r\n      \"tags\": this.filters.tags,\r\n      \"limit\": this.settings.limit,\r\n      \"page\": this.page,\r\n    }).toString();\r\n  }\r\n\r\n  fetch(callback) {\r\n    if (this.finished === false && this.fetching === false){\r\n      this.fetching = true;\r\n      let url = this.getURL();\r\n      let ajaxCallback = this.fetchCallback.bind(this, callback);\r\n      E621Fetcher.queue.add(function() {\r\n        $.ajax({\r\n          url: url,\r\n          crossDomain: true,\r\n          dataType: 'json',\r\n          success: ajaxCallback,\r\n        });\r\n      });\r\n      this.currentPage++;\r\n    }\r\n  }\r\n\r\n  fetchCallback(callback, data) {\r\n    this.fetching = false;\r\n    if (data['posts'].length === 0) {\r\n      this.finished = 0;\r\n      callback([]);\r\n    } else {\r\n      let posts = this.getPosts(data['posts']);\r\n      callback(posts)\r\n    }\r\n  }\r\n\r\n  getPosts(jsonPosts) {\r\n    let posts = [];\r\n    for (let i = 0; i < jsonPosts.length; i++) {\r\n        let id = jsonPosts[i]['id'];\r\n        let contentURL = jsonPosts[i]['file']['url'];\r\n        let previewURL = jsonPosts[i]['preview']['url'];\r\n        let extension = jsonPosts[i]['file']['ext'];\r\n        let link = 'https://e621.net/posts/' + id;\r\n        if (contentURL === null) continue; // Skip if blacklisted\r\n        posts.push(new Post(\r\n            id,\r\n            contentURL,\r\n            previewURL,\r\n            extension,\r\n            link,\r\n        ));\r\n    }\r\n    return posts;\r\n  }\r\n}\r\n\r\nexport default E621Fetcher;\r\n","import React from 'react';\r\n\r\n\r\nclass Field extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <h2>{this.props.label}</h2>\r\n        <input {...this.props} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Field;\r\n","import React from 'react';\r\n\r\nimport Field from './Field';\r\n\r\nimport './E621Filters.css';\r\n\r\n\r\nclass E621Filters extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleTagsChange = this.handleTagsChange.bind(this);\r\n    this.search = this.search.bind(this);\r\n    this.state = {tags: ''};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"form\">\r\n        <Field label=\"Tags\" type=\"text\" onChange={this.handleTagsChange} onKeyPress={this.handleTagsKey} />\r\n        <button onClick={this.search}>\r\n          Search\r\n        </button>\r\n        <button onClick={this.props.escape}>\r\n          Close\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleTagsChange(e) {\r\n    this.setState({ tags: e.target.value });\r\n  }\r\n\r\n  handleTagsKey(e) {\r\n    if (e.key === 'Enter') {\r\n      this.search();\r\n    }\r\n  }\r\n\r\n  search() {\r\n    let filters = {\r\n      tags: this.state.tags\r\n    };\r\n    this.props.searchCallback(filters);\r\n  }\r\n}\r\n\r\nexport default E621Filters;\r\n","import React from 'react';\r\n\r\n\r\nexport class ImageCache extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{display: \"none\"}}>\r\n        {this.getImages(this.props.posts)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getImages(posts) {\r\n    let images = [];\r\n    for (let i = 0; i < posts.length; i++) {\r\n      images.push(<img src={posts[i].contentURL} alt=\"\" />)\r\n    }\r\n    return images;\r\n  }\r\n}\r\n\r\nexport default ImageCache;\r\n","import React from 'react';\r\n\r\nimport './Slideshow.css';\r\n\r\n\r\nexport class Slideshow extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"slide-wrapper\">\r\n        <div className=\"slide\">\r\n          <img className=\"current-image\" src={this.props.post.contentURL} alt=\"\" />\r\n        </div>\r\n        <div className=\"slide-controls\">\r\n          <button className=\"prev-button\" onClick={this.props.prev}>Previous</button>\r\n          <button className=\"escape-button\" onClick={this.props.escape}>Close</button>\r\n          <a className=\"source-button\" href={this.props.post.link} \r\n             target=\"_blank\" rel=\"noopener noreferrer\">Link</a>\r\n          <button className=\"next-button\" onClick={this.props.next}>Next</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Slideshow;\r\n","export class PostManager {\r\n  constructor(fetcher) {\r\n    this.fetcher = fetcher;\r\n    this.posts = {};\r\n    this.order = [];\r\n    this.currentIndex = 0;\r\n    // TODO manage extensions per platform\r\n    // e621Extensions = new Set(['png','jpg','gif'])\r\n    // faExtensions = new Set(['png','jpg','jpeg','gif','bmp'])\r\n    this.validExtensions = new Set(['png','jpg','jpeg','gif','bmp']);\r\n  }\r\n\r\n  empty() {\r\n    this.posts = {};\r\n    this.order = [];\r\n    this.currentIndex = 0;\r\n  }\r\n\r\n  fetchIfApplicable(callback) {\r\n    if (this.fetcher.finished === false &&\r\n        this.order.length - this.currentIndex < 20) {\r\n      this.fetcher.fetch(this.fetchCallback.bind(this, callback));\r\n    }\r\n  }\r\n\r\n  fetchCallback(callback, posts) {\r\n    if (posts.length === 0) {\r\n      if (callback) {\r\n        callback(false);\r\n      }\r\n    } else {\r\n      this.addPosts(posts);\r\n      if (callback) {\r\n        callback(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  isPostAllowed(post) {\r\n    return this.validExtensions.has(post.extension);\r\n  }\r\n\r\n  addPosts(posts) {\r\n    for (let i = 0; i < posts.length; i++) {\r\n      let post = posts[i];\r\n      if (this.isPostAllowed(post)) {\r\n        this.posts[post.id] = post;\r\n        this.order.push(post.id);\r\n      }\r\n    }\r\n  }\r\n\r\n  moveToStart() {\r\n    this.currentIndex = 0;\r\n  }\r\n\r\n  moveTo(index) {\r\n    this.currentIndex = index;\r\n  }\r\n\r\n  next() {\r\n    this.currentIndex++;\r\n    var postCount = this.order.length\r\n    if (this.currentIndex >= postCount){\r\n      if (postCount > 0) {\r\n        this.currentIndex = postCount - 1;\r\n      } else {\r\n        this.currentIndex = 0;\r\n      }\r\n      return false;\r\n    }\r\n    this.fetchIfApplicable();\r\n    return true;\r\n  }\r\n\r\n  prev() {\r\n    this.currentIndex--;\r\n    if (this.currentIndex < 0){\r\n      this.currentIndex = 0;\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  getPostById(id) {\r\n    return this.posts[id];\r\n  }\r\n\r\n  getPostByIndex(index) {\r\n    return this.posts[this.order[index]];\r\n  }\r\n\r\n  getCurrentPost() {\r\n    return this.getPostByIndex(this.currentIndex);\r\n  }\r\n\r\n  getCachePosts(preload, postload) {\r\n    let minimum = this.currentIndex - postload;\r\n    let maximum = this.currentIndex + preload;\r\n    if (minimum < 0) {\r\n        minimum = 0;\r\n    }\r\n    if (maximum >= this.order.length) {\r\n        maximum = this.order.length - 1;\r\n    }\r\n    let posts = [];\r\n    for (let i = minimum; i <= maximum; i++) {\r\n        posts.push(this.getPostByIndex(i));\r\n    }\r\n    return posts;\r\n  }\r\n}\r\n\r\nexport default PostManager;\r\n","import React from 'react';\n\nimport E621Fetcher from '../api/E621Fetcher';\nimport Post from '../api/Post';\nimport E621Filters from './E621Filters';\nimport ImageCache from './ImageCache';\nimport Slideshow from './Slideshow';\nimport PostManager from '../helpers/PostManager';\n\nimport missing from '../missing.png';\n\n\nclass App extends React.Component {\n  static missingPost = new Post(\n    0,\n    missing,\n    missing,\n    \"png\",\n    \"#\"\n  );\n\n  constructor(props) {\n    super(props);\n    this.search = this.search.bind(this);\n    this.searchCallback = this.searchCallback.bind(this);\n    this.searchEscape = this.searchEscape.bind(this);\n    this.slideshowEscape = this.slideshowEscape.bind(this);\n    this.slideshowNext = this.slideshowNext.bind(this);\n    this.slideshowPrev = this.slideshowPrev.bind(this);\n    this.keydownHandler = this.keydownHandler.bind(this);\n    this.state = {\n      mode: 'search',\n      api: 'e621',\n      settings: {},\n      currentCache: [],\n      slideshowPost: null,\n      postManager: null,\n    };\n  }\n\n  render() {\n    switch (this.state.mode) {\n      default:\n      case 'search':\n        switch(this.state.api) {\n          default:\n          case 'e621':\n            return (\n              <>\n                <ImageCache posts={this.state.currentCache} />\n                <E621Filters searchCallback={this.search} \n                            escape={this.searchEscape} />\n              </>\n            );\n        }\n      case 'slideshow':\n        return (\n          <>\n            <ImageCache posts={this.state.currentCache} />\n            <Slideshow post={this.state.slideshowPost || App.missingPost}\n                      next={this.slideshowNext}\n                      prev={this.slideshowPrev}\n                      escape={this.slideshowEscape} />\n          </>\n        );\n    }\n  }\n\n  keydownHandler(e) {\n    if (this.state.mode === 'slideshow') {\n      var key = e.which || e.keyCode;\n      \n      switch (key) {\n        case 37: // Left arrow\n        case 65: // A\n          this.slideshowPrev();\n          return;\n        case 39: // Right arrow\n        case 68: // D\n          this.slideshowNext();\n          return;\n        default: return;\n      }\n    }\n  }\n  \n  componentDidMount() { \n    document.addEventListener('keydown', this.keydownHandler);\n  }\n\n  componentWillUnmount() { \n    document.addEventListener('keydown', this.keydownHandler);\n  }\n\n  search(filters) {\n    // TODO pass proper settings\n    let settings = {limit: 50};\n    let postManager = new PostManager(new E621Fetcher(filters, settings));\n    postManager.fetchIfApplicable(this.searchCallback);\n    this.setState({\n      mode: 'slideshow',\n      postManager: postManager,\n    });\n  }\n\n  searchCallback() {\n    this.setState({\n      mode: 'slideshow',\n      currentCache: this.state.postManager.getCachePosts(10, 5),\n      slideshowPost: this.state.postManager.getCurrentPost(),\n    });\n  }\n\n  searchEscape() {\n    this.setState({\n      mode: 'slideshow',\n    });\n  }\n\n  slideshowEscape() {\n    this.setState({\n      mode: 'search',\n    });\n  }\n\n  slideshowNext() {\n    this.state.postManager.next();\n    // TODO configure cache size with settings\n    this.setState({\n      currentCache: this.state.postManager.getCachePosts(10, 5),\n      slideshowPost: this.state.postManager.getCurrentPost(),\n    });\n  }\n\n  slideshowPrev() {\n    this.state.postManager.prev();\n    this.setState({\n      currentCache: this.state.postManager.getCachePosts(10, 5),\n      slideshowPost: this.state.postManager.getCurrentPost(),\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}